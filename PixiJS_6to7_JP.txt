■■ v7 移行ガイド

■ 概要
何よりもまず、PixiJS v7は、6年以上前に PixiJSが最初に公開されて以来のエコシステムの変化を反映した現代的なリリースです。
ブラウザーはよりよく改善されましたが、PixiJSはフェッチ、ワーカー、現代的なJavaScript構文等の新機能の幾つかを十分に活用していませんでした。
このリリースでは、高レベルのDisplayObjects（スプライト、グラフィックス、メッシュ等）の多くがそのまま維持されます。
幾つかの事を除けば、このリリースの影響は殆どのユーザーにとって中から低程度の筈です。

■ Internet Explorer の削除
Microsoftが IEのサポートを正式に終了したため、私たちも従う事にしました。
IEは、Safari/Chrome/Firefox/Edgeおよびモバイルブラウザーの部外者であったため、私たちの現代化の多くが簡素化されました。
IEのサポートが必要な場合は、Babelまたはその他のトランスパイルツールの使用を検討してください。

■ ポリフィルを削除
requestAnimationFrameやPromise等のバンドルされたポリフィルを削除しました。
これらは現在のブラウザで広く利用できます。
プロジェクトで必要な場合、開発者は下位互換性のために必要なポリフィルを含める必要があります。
polyfill.io（https://cdn.polyfill.io/v3/url-builder/）をチェックしてください。

■ ES2020（モジュール)およびES2017（ブラウザー）のアウトプット
PixiJSは歴史的に ES5のみを公開していました (クラスはありません!)。
新しいアウトプット標準により、以前は使用できなかったES2017機能を使用できるようになりました。
（例: String.prototype.startsWith、Array.prototype.contains等）
コードの可読性が良くなるだけでなく、出力も見栄えが良くなります。
モジュールの場合、ヌル合体（？？）等の構文を含むES2020をアウトプットしています。
プロジェクトに下位互換性が必要な場合は、Babelを使用してトランスパイルまたはポリフィルを実行できます。

■ InteractionManagerをEventSystemに置き換え
InteractionManagerは複雑になり、メンテナンスが困難になっていました。
コードを理解するコアチームメンバーは殆どいませんでした。
私たちはFederated（連合）Eventsに移行する事にしました。
これは簡潔で、DOMとの整合性が高く、バブリング等をサポートしています。
良いニュースは、コードを変更する必要がない事です。
これは、ほとんどがドロップインの置き換えであるためです。
addEventListener APIとremoveEventListener APIを DisplayObjectに追加しました。
これらは同じDOMシグネチャを持ち、オンとオフの代わりに使用できます。

■ ローダーをアセットに置き換え
同様に、従来のアプローチ（XMLHttpRequest等）のため、Loaderを削除したいと考えていました。
これは、長い間PixiJSと一緒に使用されてきたresource-loaderからフォークされました。
Loaderの元の設計のインスピレーションは、今では時代遅れに見えるFlash/AS3に大きく影響されました。
新しいイテレーションで求めていた事が幾つかありました: 
静的読み込み、Workerを使用した読み込み、バックグラウンド読み込み、Promiseベース、キャッシュの層数の削減。
これがどのように変化するかの簡単な例を次に示します。
