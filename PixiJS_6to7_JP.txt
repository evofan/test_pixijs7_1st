■■ v7 移行ガイド

■ 概要
何よりもまず、PixiJS v7は、6年以上前に PixiJSが最初に公開されて以来のエコシステムの変化を反映した現代的なリリースです。
ブラウザーはよりよく改善されましたが、PixiJSはフェッチ、ワーカー、現代的なJavaScript構文等の新機能の幾つかを十分に活用していませんでした。
このリリースでは、高レベルのDisplayObjects（スプライト、グラフィックス、メッシュ等）の多くがそのまま維持されます。
幾つかの事を除けば、このリリースの影響は殆どのユーザーにとって中から低程度の筈です。

■ Internet Explorer の削除
Microsoftが IEのサポートを正式に終了したため、私たちも従う事にしました。
IEは、Safari/Chrome/Firefox/Edgeおよびモバイルブラウザーの部外者であったため、私たちの現代化の多くが簡素化されました。
IEのサポートが必要な場合は、Babelまたはその他のトランスパイルツールの使用を検討してください。

■ ポリフィルを削除
requestAnimationFrameやPromise等のバンドルされたポリフィルを削除しました。
これらは現在のブラウザで広く利用できます。
プロジェクトで必要な場合、開発者は下位互換性のために必要なポリフィルを含める必要があります。
polyfill.io（https://cdn.polyfill.io/v3/url-builder/）をチェックしてください。

■ ES2020（モジュール）およびES2017（ブラウザー）のアウトプット
PixiJSは歴史的に ES5のみを公開していました (クラスはありません!)。
新しいアウトプット標準により、以前は使用できなかったES2017機能を使用できるようになりました。
（例: String.prototype.startsWith、Array.prototype.contains等）
コードの可読性が良くなるだけでなく、出力も見栄えが良くなります。
モジュールの場合、ヌル合体（？？）等の構文を含むES2020をアウトプットしています。
プロジェクトに下位互換性が必要な場合は、Babelを使用してトランスパイルまたはポリフィルを実行できます。

■ InteractionManagerをEventSystemに置き換え
InteractionManagerは複雑になり、メンテナンスが困難になっていました。
コードを理解するコアチームメンバーは殆どいませんでした。
私たちはFederated（連合）Eventsに移行する事にしました。
これは簡潔で、DOMとの整合性が高く、バブリング等をサポートしています。
良いニュースは、コードを変更する必要がない事です。
これは、ほとんどがドロップインの置き換えであるためです。
addEventListener APIとremoveEventListener APIを DisplayObjectに追加しました。
これらは同じDOMシグネチャを持ち、オンとオフの代わりに使用できます。

■ ローダーをアセットに置き換え
同様に、従来のアプローチ（XMLHttpRequest等）のため、Loaderを削除したいと考えていました。
これは、長い間PixiJSと一緒に使用されてきたresource-loaderからフォークされました。
Loaderの元の設計のインスピレーションは、今では時代遅れに見えるFlash/AS3に大きく影響されました。
新しいイテレーションで求めていた事が幾つかありました: 
静的読み込み、Workerを使用した読み込み、バックグラウンド読み込み、Promiseベース、キャッシュの層数の削減。
これがどのように変化するかの簡単な例を次に示します。

old:
----------------------------------------------------------------------------------------------------
import { Loader, Sprite } from 'pixi.js';

const loader = new Loader();
loader.add('background', 'path/to/assets/background.jpg');
loader.load((loader, resources) => {
  const image = Sprite.from(resources.background.texture);
});
----------------------------------------------------------------------------------------------------

new:
----------------------------------------------------------------------------------------------------
import { Assets, Sprite } from 'pixi.js';

const texture = await Assets.load('path/to/assets/background.jpg');
const image = Sprite.from(texture);
----------------------------------------------------------------------------------------------------

■ peerDependenciesの使用を放棄する
PixiJSは、各パッケージ内のpackage.jsonでpeerDependenciesを頻繁に使用します。
このデザインの選択により、Pixiは多くの問題に悩まされてきました。
削除するのは重大な変更であるため、今が良い時期でした。
何も選択しない代わりに、peerDependenciesを完全に削除する事にしました。
これにより、pixi.jsのインストールとアップグレードがはるかに簡単になります。
パッケージを使用してカスタムバージョンを作成するためのツールの更新に取り組んでいます。
※7.2.0 の時点で、一部のモジュールベースのCDNとの互換性を維持するために、この変更を元に戻しました。

■ その他の変更
・pixi.jsとpixi.js-legacyを除いて、全てのパッケージのブラウザービルドが削除されました。
・Graphics.nextRoundedRectBehaviorを削除します。これがデフォルトの動作になりました。
・Text.nextLineHeightBehaviorを削除します。これがデフォルトの動作になりました。
・AbstractBatchRendererとBatchPluginFactoryが削除されました。
BatchRendererを拡張するか、デフォルトのBatchRendererでsetShaderGeneratorを使用します(例: renderer.plugins.batch)。
・BatchRendererはデフォルトで@pixi/coreにインストールされ、Renderer.registerPlugin('batch',BatchRenderer)はもう必要ありません。

■ @pixi/coreからのエクスポート
@pixi/coreパッケージは、次のパッケージに依存し、再エクスポートするようになりました。

@pixi/math
@pixi/contants
@pixi/utils
@pixi/runner
@pixi/settings
@pixi/ticker

一部のパッケージは直接インストールしても機能しますが、他のパッケージは機能しません。
@pixi/coreと一緒にインストールする事で、同じコードの2つのコピーを効果的にインポートする事になるからです。

@pixi/coreにはそのパッケージの独自のバージョンがあるため、
@pixi/settingsから設定を変更しても何も起こらないというエラーが発生します。
プロジェクトからこれらをアンインストールし、代わりに @pixi/coreを使用する事をお勧めします。
----------------------------------------------------------------------------------------------------
import { Rectangle } from '@pixi/math';
import { settings } from '@pixi/settings';
import { ALPHA_MODES } from '@pixi/constants';
import { string2hex } from '@pixi/utils';
----------------------------------------------------------------------------------------------------

今は次のようになります:
----------------------------------------------------------------------------------------------------
import { Rectangle, settings, ALPHA_MODES, utils } from '@pixi/core';

const { string2hex } = utils;
----------------------------------------------------------------------------------------------------

■ 抽出と準備のシステム
ExtractとprepareのプラグインはRendererの"system"に変換されました。
----------------------------------------------------------------------------------------------------
renderer.plugins.extract
renderer.plugins.prepare
----------------------------------------------------------------------------------------------------

今は次のようになります:
----------------------------------------------------------------------------------------------------
renderer.extract
renderer.prepare
----------------------------------------------------------------------------------------------------

■ 拡張機能の自己インストール
拡張機能は自分自身でインストールされるようになったため、クラスをインポートするだけで使用出来ます。

例えばv6では次のようになります:
----------------------------------------------------------------------------------------------------
import { AccessibilityManager } from '@pixi/accessibility';
import { extensions } from '@pixi/core';
extensions.add(AccessibilityManager);
----------------------------------------------------------------------------------------------------

今は次のようになります:
----------------------------------------------------------------------------------------------------
import '@pixi/accessibility';
----------------------------------------------------------------------------------------------------

■ イベントでのhitTestの使用
新しいイベントシステムで変更された一般的なAPIの1つは、hitTestです。
----------------------------------------------------------------------------------------------------
import {Application} from 'pixi.js';

const app = new Application();
app.renderer.plugins.interaction.hitTest({x, y});
----------------------------------------------------------------------------------------------------

今は次のようになります:
----------------------------------------------------------------------------------------------------
import {Application, EventBoundary} from 'pixi.js';

const app = new Application();
const boundary = new EventBoundary(app.stage);
boundary.hitTest(x, y);
----------------------------------------------------------------------------------------------------

■ 新しい非同期抽出メソッド
次のメソッドは非同期になり、Promise を返します。
・CanvasExtract.base64()
・CanvasExtract.image()
・Extract.base64()
・Extract.image()
----------------------------------------------------------------------------------------------------
import {Application, EventBoundary} from 'pixi.js';

const app = new Application();
const dataUri = app.renderer.extract.base64();
----------------------------------------------------------------------------------------------------

今は次のようになります:
----------------------------------------------------------------------------------------------------
import {Application, EventBoundary} from 'pixi.js';

const app = new Application();
const dataUri = await app.renderer.extract.base64();
----------------------------------------------------------------------------------------------------

■ インタラクティブなムーブイベント

PixiJSのインタラクションイベントは、v7のDOMのように動作するようになりました。
これは、開発者が慣れ親しんだ動作に合わせる事を意図したものですが、
pointermove、mousemove、およびtouchmoveの動作に明らかに影響を与えます。

DOMと同様に、moveイベントはローカルになりました。
これは、オブジェクトの境界の外にいる場合、moveイベントを受信しない事を意味します。
一般に、DisplayObject自体ではなく、ステージ又は親（オブジェクト）にmoveイベントを追加する事を検討する必要があります。

動作事例:
https://jsfiddle.net/bigtimebuddy/spnv4wm6/

■ インタラクティブなプロパティハンドラーが削除されました
プロパティベースのハンドラーがイベントから削除されました。これは、古いInteractionManagerの機能でした。
例えば：
----------------------------------------------------------------------------------------------------
sprite.buttonMode = true;
----------------------------------------------------------------------------------------------------

今は次のようになります:
----------------------------------------------------------------------------------------------------
sprite.cursor = 'pointer';
----------------------------------------------------------------------------------------------------

この機能を再度追加したい場合は、DisplayObjectのプロトタイプにパッチを適用出来ます。

----------------------------------------------------------------------------------------------------
import { DisplayObject } from 'pixi.js';

Object.defineProperty(DisplayObject.prototype, 'buttonMode', {
  get() { return this.cursor === 'pointer'; },
  set(value) { this.cursor = value ? 'pointer' : null; },
});
----------------------------------------------------------------------------------------------------
